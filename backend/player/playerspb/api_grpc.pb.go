// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api.proto

package playerspb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlayersService_ConfirmPlayer_FullMethodName           = "/playerspb.PlayersService/ConfirmPlayer"
	PlayersService_ConfirmGroupLeavingUser_FullMethodName = "/playerspb.PlayersService/ConfirmGroupLeavingUser"
)

// PlayersServiceClient is the client API for PlayersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayersServiceClient interface {
	ConfirmPlayer(ctx context.Context, in *ConfirmPlayerRequest, opts ...grpc.CallOption) (*ConfirmPlayerResponse, error)
	ConfirmGroupLeavingUser(ctx context.Context, in *ConfirmGroupLeavingUserRequest, opts ...grpc.CallOption) (*ConfirmGroupLeavingUserResponse, error)
}

type playersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayersServiceClient(cc grpc.ClientConnInterface) PlayersServiceClient {
	return &playersServiceClient{cc}
}

func (c *playersServiceClient) ConfirmPlayer(ctx context.Context, in *ConfirmPlayerRequest, opts ...grpc.CallOption) (*ConfirmPlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmPlayerResponse)
	err := c.cc.Invoke(ctx, PlayersService_ConfirmPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playersServiceClient) ConfirmGroupLeavingUser(ctx context.Context, in *ConfirmGroupLeavingUserRequest, opts ...grpc.CallOption) (*ConfirmGroupLeavingUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmGroupLeavingUserResponse)
	err := c.cc.Invoke(ctx, PlayersService_ConfirmGroupLeavingUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayersServiceServer is the server API for PlayersService service.
// All implementations must embed UnimplementedPlayersServiceServer
// for forward compatibility.
type PlayersServiceServer interface {
	ConfirmPlayer(context.Context, *ConfirmPlayerRequest) (*ConfirmPlayerResponse, error)
	ConfirmGroupLeavingUser(context.Context, *ConfirmGroupLeavingUserRequest) (*ConfirmGroupLeavingUserResponse, error)
	mustEmbedUnimplementedPlayersServiceServer()
}

// UnimplementedPlayersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlayersServiceServer struct{}

func (UnimplementedPlayersServiceServer) ConfirmPlayer(context.Context, *ConfirmPlayerRequest) (*ConfirmPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmPlayer not implemented")
}
func (UnimplementedPlayersServiceServer) ConfirmGroupLeavingUser(context.Context, *ConfirmGroupLeavingUserRequest) (*ConfirmGroupLeavingUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmGroupLeavingUser not implemented")
}
func (UnimplementedPlayersServiceServer) mustEmbedUnimplementedPlayersServiceServer() {}
func (UnimplementedPlayersServiceServer) testEmbeddedByValue()                        {}

// UnsafePlayersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayersServiceServer will
// result in compilation errors.
type UnsafePlayersServiceServer interface {
	mustEmbedUnimplementedPlayersServiceServer()
}

func RegisterPlayersServiceServer(s grpc.ServiceRegistrar, srv PlayersServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlayersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlayersService_ServiceDesc, srv)
}

func _PlayersService_ConfirmPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayersServiceServer).ConfirmPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayersService_ConfirmPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayersServiceServer).ConfirmPlayer(ctx, req.(*ConfirmPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayersService_ConfirmGroupLeavingUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmGroupLeavingUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayersServiceServer).ConfirmGroupLeavingUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayersService_ConfirmGroupLeavingUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayersServiceServer).ConfirmGroupLeavingUser(ctx, req.(*ConfirmGroupLeavingUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayersService_ServiceDesc is the grpc.ServiceDesc for PlayersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playerspb.PlayersService",
	HandlerType: (*PlayersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfirmPlayer",
			Handler:    _PlayersService_ConfirmPlayer_Handler,
		},
		{
			MethodName: "ConfirmGroupLeavingUser",
			Handler:    _PlayersService_ConfirmGroupLeavingUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
